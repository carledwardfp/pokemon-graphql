import type { NextPage } from 'next'
import Head from 'next/head'
import { useQuery } from '@apollo/client'
import { Footer, Header, Pokemon, PokemonSkeleton } from 'components'
import { GET_POKEMON_BY_NAME } from 'graphql/queries'
import { Pokemon as IPokemon } from 'graphql/types'
import dragonite from 'public/dragonite.png'
import lapras from 'public/lapras.png'

const Home: NextPage = () => {
  const { data: dragoniteData, loading: dragoniteLoading } = useQuery<{
    pokemon: IPokemon
  }>(GET_POKEMON_BY_NAME, { variables: { name: 'Dragonite' } })
  const { data: laprasData, loading: laprasLoading } = useQuery<{
    pokemon: IPokemon
  }>(GET_POKEMON_BY_NAME, { variables: { name: 'Lapras' } })

  return (
    <div className="container px-4">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <Header loading={dragoniteLoading || laprasLoading} />
        <div className="flex flex-col-reverse md:flex-row gap-4 my-4">
          {dragoniteLoading ? (
            <PokemonSkeleton color="bg-dragonite" />
          ) : (
            dragoniteData && (
              <Pokemon
                image={dragonite}
                data={dragoniteData.pokemon}
                bgColor="bg-dragonite"
                borderColor="border-dragonite"
                color="text-dragonite_text"
              />
            )
          )}
          {laprasLoading ? (
            <PokemonSkeleton color="bg-lapras" />
          ) : (
            laprasData && (
              <Pokemon
                image={lapras}
                data={laprasData.pokemon}
                bgColor="bg-lapras"
                borderColor="border-lapras"
                color="text-lapras_text"
              />
            )
          )}
        </div>
        <Footer loading={dragoniteLoading || laprasLoading} />
      </main>
    </div>
  )
}

export default Home
